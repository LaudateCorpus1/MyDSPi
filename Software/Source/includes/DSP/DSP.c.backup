
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <string.h>
#include <time.h>

/* init config file

*/
FILE *init_config(char *pPath, const char *pRight)
{
	FILE *fp;
	
	const char *pbuffer= pRight;
	
	
   fp = fopen(pPath,pRight);
 if(fp == NULL)
   {
      perror("Error opening file");
      // return(-1);
   }
   else
   {
	return fp;   
   }
   
}


/* Count the number of lines to treat in the file 
*/
int getEntryCount(FILE *fd)
{
	int fileLen=0;
	char buffer[FILENAME_MAX];
	int i=0;
	const char main_separator[2] = ";";
	char *token=NULL;
	
	
	fseek(fd, 0, SEEK_END);
	fileLen=ftell(fd);
	fseek(fd, 0, SEEK_SET);
    fread(buffer, fileLen, 1, fd);
	
	token = strtok(buffer, main_separator);

   while(token!=NULL)
   { 
		i++;
		token = strtok(NULL, main_separator);
		// printf("\ntoken nÂ°%d:%s",i,token);
   } 
   
  
   return(i);
}


/*get config file register addresses, registers masks and register default values
* Open file, separate each line by token x (0x02:64,0;)
* Split every register address in config[x][][]
* Split every mask in config[][x][]
* Split every default value in config[][][x]
*/
int dsp_read_config(char *pPath,int config[100][3])
{		
	int fileLen;
	char buffer[FILENAME_MAX];
	const char main_separator[2] = ";";
	char *token=NULL;
	
	int j=0;
	int str1=0;
	int str2=0;
	int str3=0;
	char toto[20];
	
	int count = 0;
	FILE *fd;
	
	fd = init_config(pPath,"r");
	count = getEntryCount(fd);

	//get the content 
	fseek(fd, 0, SEEK_END);
	fileLen=ftell(fd);
	fseek(fd, 0, SEEK_SET);
    fread(buffer, fileLen, 1, fd);
   
	token = strtok(buffer, main_separator);
	strcpy(toto,token);
	sscanf(toto, "%x:%d,%d", &str1, &str2, &str3);	
	config[0][0] = str1;
	config[0][1] = str2;
	config[0][2] = str3;
	
	for(j=1;j<count;j++)
	 {
		token = strtok(NULL, main_separator);
		// printf("\n<token:%s>",token);
		sscanf(token,"%x:%d,%d", &str1, &str2, &str3);
		config[j][0] = str1;
		config[j][1] = str2;
		config[j][2] = str3;
	 }  
	 fclose(fd);
return(1);
}


/*set config file register addresses, registers masks and register default values
*
*/
int dsp_write_config(char *pPath, int config[100][3], int count)
{
	int i=0;
	char *buffer;
	FILE *fd;
	
	fd = init_config(pPath,"w");
		
	for(i=0;i<count;i++)
	{
		fprintf(fd, "0x%x:%d,%d;\n", config[i][0],config[i][1], config[i][2]);
		
	}
	fclose(fd);
}

/* Replace the value of a register by a new one
 */
int dsp_replace_config(char *pPath, int reg, int mask, int nvalue)
{
	int config[100][3]={0,0};
	int count=0;
	int i;
	int status=0;
	FILE *fd;
	
	fd = init_config(pPath,"r");
	count = getEntryCount(fd);
	fclose(fd);
	
	asrc_read_config(pPath, config);
	
	
	for(i=0;i<count;i++)
	{
			if(config[i][0] == reg)
			{
				if(config[i][1] == mask)
				{
					config[i][2] = nvalue;
					
					status = 1;
				}
			}
	}
	fclose(fd);
	fd = init_config(pPath,"w");
	asrc_write_config(pPath,config,count);
	fclose(fd);
	
	return(status);
}

